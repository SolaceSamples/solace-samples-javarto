plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'application'
}

// Don't need these task, so disabling them. Makes it possible to avoid
// declaring a single application main class.
startScripts.enabled = false
run.enabled = false

// Also don't need the regular application distribution packages since
// this is just a set of samples. So disabling to make the build output
// cleaner
distTar.enabled=false
distZip.enabled=false

applicationName = 'solace-samples-javarto'

jar {
    archiveBaseName = 'solace-samples-javarto'
    archiveVersion =  ''
    manifest {
        attributes 'Implementation-Title': 'Solace JavaRTO Getting Started Samples',
                   'Implementation-Version': ''
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Solace Messaging API for JavaRTO Dependencies
    implementation("com.solacesystems:solclientj:10.5.0")
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
}

//tasks.withType(JavaCompile).all {
//    options.compilerArgs.add("-Xlint:all")
//}

def scripts = [ 'TopicPublisher':'com.solace.samples.javarto.patterns.TopicPublisher',
                'TopicSubscriber':'com.solace.samples.javarto.patterns.TopicSubscriber',
                'DirectPubSub':'com.solace.samples.javarto.features.DirectPubSub',
                'MessageReplay':'com.solace.samples.javarto.features.MessageReplay',
                'SimpleFlowToTopic':'com.solace.samples.javarto.features.SimpleFlowToTopic',
                'TopicToQueueMapping':'com.solace.samples.javarto.features.TopicToQueueMapping',
                'Transactions':'com.solace.samples.javarto.features.Transactions',
                'Replication':'com.solace.samples.javarto.features.Replication',
                'SecureSession':'com.solace.samples.javarto.features.SecureSession',
                'QueueProvision':'com.solace.samples.javarto.features.QueueProvision',
                'PayloadCompression':'com.solace.samples.javarto.features.PayloadCompression'
]
scripts.each() { scriptName, className ->
    def t = tasks.create(name: scriptName+'StartScript', type: CreateStartScripts) {
        mainClass = className
        applicationName = scriptName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtimeClasspath
        defaultJvmOpts = ['-ea']  // enable assertions
    }
    applicationDistribution.into("bin") {
        from(t)
        fileMode = 0755
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

installDist {
    destinationDir = new File(project.buildDir, 'staged')
}

assemble.dependsOn installDist
